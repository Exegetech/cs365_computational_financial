This is the output and code for Hw1a.
All value is assign in the code in main.
All output is writing in main(){â€¦} with case check.
<<<<<<<<<<<<<<<<<Separate line>>>>>>>>>>>>>>>>>>>>>
//1.1 Future value
double future_value(double F0, double t0, double t1, double r)
{
    double r_decimal = 0.01*r;
    double F1 = F0*exp(r_decimal*(t1-t0));
    return F1;
}

output:

For 1.1: Future value, the F0, t0, t1. and r is given in code,
F0=123; t0=23; t1=35; r=5; 
result F1 is 224.120612
=====================================
//1.2 Discount factor
double discount_factor(double F1, double t0, double t1, double r){
    double r_decimal = 0.01*r;
    double df = F1*exp((-1)*r_decimal*(t1-t0));
    return df;
}

int df_and_r(double F0, double F1, double t0, double t1, double & df, double & r)
{
    if (t1-t0 == 0.0) {
        df = 0;
        r = 0;
        return -1;
    }
    if ((F0 < 0.0) || (F1 < 0.0)) {
        // *** you figure it out ***
        df=0;
        r=0;
        return -2;
    }
    // *** you have to write the rest ***
    // calculate discount_factor value df and r
    r= (log(F1/F0)/log(exp(1)))/(t1-t0)*100;
    df = discount_factor(F1, t0, t1, r);
    return 0;
}


output:

For 1.2: discount factor, the check result is 0
The value for df is 123.000000
The r from 1.1 is 5.0, and after calculation, the value for r is 5.000000
=====================================
//1.3 Bond Price from yield
void price_from_yield(double F, double c, double y, int n, double & B){
    double y_decimal = 0.01*y;
    for(int i=1; i<=n; i++){
        if(i!=n){
            B+= (0.5*c)/(pow(1+0.5*y_decimal, i));
        }else{
            B+=(F+0.5*c)/(pow(1+0.5*y_decimal, i));
        }
    }
}

output:

For 1.3: 
F=100; y=10; c=10; n=50;
Case 1: F=100, if y=c, result for B is 100.000000
Case 2: checking if y=0, result: 
They are equal, B is 350.000000 and B_from_check_equation is 350.000000
Case 3: checking if c=0, result: 
They are equal, B is 8.720373 and B_from_check_equation is 8.720373
======================================
//1.4 Yield from bond price
int yield_from_price(double F, double c, int n, double B_market, double tol, int max_iter, double & y)
{
    double B, B_y_low, B_y_high, y_low, y_high;
    y_low=0;
    price_from_yield(F,c, y_low, n, B_y_low);
    if(abs(B_y_low-B_market) <= tol){
        y=y_low;
        return 0;
    }
    
    y_high=100;
    price_from_yield(F, c, y_high, n, B_y_high);
    if(abs(B_y_high-B_market)<=tol){
        y=y_high;
        return 0;
    }
    
    if(B_y_low< B_market || B_y_high>B_market){
        y=0;
        return 1;
    }
    //step 1-8 end.
    
    for(int i=0; i<max_iter; ++i){
        y=(y_low+y_high)/2.0;
        price_from_yield(F, c, y, n, B);
        
        if(abs(B-B_market)<=tol){
            return 0;
        }else if (B>B_market){
            y_low=y;
        }else{
            y_high=y;
        }
        
        if((y_high-y_low)<=tol){
            return 0;
        }
        
        if(i==max_iter){
            y=0;
            return 1;
        }
    }
    return 0;
}

output:

1.4: Yield from bond price
test case for step 21: 
double B_market =100; double tol =12; int max_iter=50; 
0
y = 18.750000 c = 10.000000
check F=100, set y==c, B is 100.000000
step 22:
case 1: B_market <100 
0
Correct, y>c, where y=25.000000 c=10.000000
case 2: B_market>100
0
correct, y<c, where y=6.250000 c=10.000000
Step 23 test case:
1
Zero coupon bond case check: 
y is 0.000000
Program ended with exit code: 0